#+title: Config
#+STARTUP: overview
#+PROPERTY: header-args:python :tangle config.py :cache yes :results silent

* Table of Contents :toc:
- [[#intro][Intro]]
  - [[#license][License]]
  - [[#imports][Imports]]
- [[#random-config-variables][Random Config Variables]]
  - [[#settings][Settings]]
  - [[#default-apps][Default Apps]]
  - [[#setup][Setup]]
- [[#layouts][Layouts]]
- [[#groups][Groups]]
  - [[#dgroups][DGroups]]
  - [[#scratchpad][Scratchpad]]
- [[#keybindings][Keybindings]]
  - [[#navigation][Navigation]]
  - [[#layout][Layout]]
  - [[#modyfing-window-properties][Modyfing Window Properties]]
  - [[#ending-it-all][Ending It All]]
  - [[#starting-it-all][Starting It All]]
  - [[#groups-1][Groups]]
  - [[#scratchpads][Scratchpads]]
  - [[#media-and-system-keys][Media and System Keys]]
  - [[#mouse][Mouse]]
- [[#rules][Rules]]
  - [[#app-rules][App Rules]]
  - [[#floating-rules][Floating Rules]]
- [[#bar][Bar]]
- [[#tangle-this-file][Tangle this file!]]

* Intro
** License
#+begin_src python
# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#+end_src
** Imports
#+begin_src python
from libqtile import bar, layout, qtile, widget
from libqtile.config import Click, Drag, DropDown, Group, Key, Match, ScratchPad, Screen
from libqtile.lazy import lazy
#+end_src
* Random Config Variables
** Settings
#+begin_src python
follow_mouse_focus = True
bring_front_click = False
floats_kept_above = True
cursor_warp = True
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True
auto_minimize = True
wl_input_rules = None
wmname = "qtile"
#+end_src
** Default Apps
#+begin_src python
terminal = "kitty"
file_manager = "nemo"
web_browser = "firefox"
sysmon = terminal + " htop"
#+end_src
** Setup
Let's also initialize some variables so we may simply add to them later.
#+begin_src python
keys = []
#+end_src
* Layouts
Note that a "layout" in qtile doesn't just talk about how your windows will appear on your screen. It also specifies certain aspects of how you move around windows. This should be kept in mind when picking what layouts you want. For more info, see the [[https://docs.qtile.org/en/latest/manual/ref/layouts.html][built-in layouts documentation]] as well as my comments about my keybindings below.

I don't need many layouts honestly. ~MonadTall~ does things exactly how I want it. ~Max~ is also nice for when I want just one big window, e.g. on my smaller laptop screen. I'll see if I'd also like ~MonadWide~. And for floating windows, I'll just use a keybind to toggle floating. No need for an extra layout.
#+begin_src python
layouts = [
    layout.MonadTall(),
    # layout.MonadWide(),
    layout.Max(),
]
#+end_src
* Groups
#+begin_src python
groups = [Group(i) for i in "1234567890"]
#+end_src

** DGroups
As I understand it, /dynamic groups/ are a way in qtile to dynamically create groups whenever they're needed. For example, you could have a new group be created everytime you launch your web browser, which will be removed once you close the webbrowser. Unfortunately, there is basically no documentation for this feature. Though I probably wouldn't use it anyway.

When using dynamic groups, the following variable could be used to automatically bind keybindings for newly created dgroups. I'll just disable it.
#+begin_src python
dgroups_key_binder = None
#+end_src
** Scratchpad
[[https://docs.qtile.org/en/latest/manual/config/groups.html#scratchpad-and-dropdown][Scratchpad]] groups are special groups that house dropdown windows. By default they are invisible, but the relevant dropdown windows can be made visible with the corresponding keybinding. I use this mainly to have a "quake-like" dropdown terminal available for when I quickly gotta execute some commands but don't want to leave the current workspace. Very convenient.
#+begin_src python
groups.append(ScratchPad("scratchpad", [
        DropDown("quake_term", terminal, height=0.4, width=1, x=0, y=0, opacity=0.9),
]))
#+end_src

* Keybindings
First of all, the most important keybinding. The modifier key. I use the super key, i.e. the "windows key".
#+begin_src python
mod = "mod4"
#+end_src
A list of available commands that can be bound to keys can be found [[https://docs.qtile.org/en/latest/manual/config/lazy.html][in the docs]].
** Navigation
Something worth mentioning that was unusual to me when first switching to qtile: Many of the functions bound below do different depending on which layout you are in. For example, in the ~Columns~ layout (used in the default config), you would use =lazy.layout.left()=, =lazy.layout.right()=, =lazy.layout.up()=, =lazy.layout.down()= to move the focus between windows, much like e.g. in i3. On the other hand, in the ~MonadTall~ layout, =lazy.layout.up()= and =lazy.layout.down()= suffice and just move the focus to the /previous/ or /next/ window, instead of actually depending on the geometry of where windows are placed on the screen. I much prefer the latter way of navigating my windows. If you prefer the former, will probably want to change a lot of these keybindings.
#+begin_src python
keys.extend([
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
])
#+end_src

Now, for moving windows. As mentioned above, I only really need =shuffle_up= and =shuffle_down= to move windows back and forth, but it can't hurt to also have bindings for left and right.
#+begin_src python
keys.extend([
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
])
#+end_src
** Layout
#+begin_src python
keys.append(Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"))
#+end_src
We also wanna be able to grow and shrink windows. With these bindings I can only control the size of the main window. If I e.g. have three windows in the second column, I have no binding to make the center one larger than the other two. But that's good enough for me.
#+begin_src python
keys.extend([
    Key([mod], "h", lazy.layout.shrink_main(), desc="Shrink window to the left"),
    Key([mod], "l", lazy.layout.grow_main(), desc="Shrink window to the right"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
])
#+end_src
** Modyfing Window Properties
#+begin_src python
keys.extend([
    Key([mod], "f", lazy.window.toggle_fullscreen(), desc="Toggle fullscreen on the focused window",),
    Key([mod], "t", lazy.window.toggle_floating(), desc="Toggle floating on the focused window"),
    Key([mod], "m", lazy.window.toggle_minimize(), desc="Toggle Minimize Window"),
])
#+end_src
** Ending It All
#+begin_src python
keys.extend([
    Key([mod, "shift"], "q", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "shift"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "shift"], "e", lazy.shutdown(), desc="Shutdown Qtile"),
])
#+end_src
** Starting It All
#+begin_src python
keys.extend([
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
    Key([mod], "d", lazy.spawn("rofi -dpi -show drun -theme /home/reiti/.config/awesome/configuration/rofi/appmenu/rofi.rasi"),
        desc="Spawn a command using a prompt widget"),

    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    Key([mod, "shift"], "Return", lazy.spawn(file_manager), desc="Launch File Manager"),
    Key([mod], "w", lazy.spawn(web_browser), desc="Launch Web Browser"),
    Key([mod], "e", lazy.spawn("emacsclient -c"), desc="Launch Emacs"),

    Key(["control", "mod1"], "Delete", lazy.spawn(sysmon), desc="Launch System Monitor"),
    Key([mod], "Print", lazy.spawn("flameshot gui"), desc="Screenshot"),
])
#+end_src
** Groups
The following adds the keybindings for groups whose names are only one character long. This character will be used in the keybinding.

For example: If you have a group name that is "webbrowser", no keybinding will be set. If you want the first group ~i~ to be designated for surfing the web, set ~i.label~ to be "webbrowser", but leave ~i.name~ as ~1~.
#+begin_src python
for i in groups:
    if len(i.name) == 1:
        keys.extend(
        [
                # mod1 + group number = switch to group
                Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
                ),
                # mod1 + shift + group number = switch to & move focused window to group
                Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
                ),
        ])
#+end_src
** Scratchpads
Keybindings for toggling dropdown windows defined [[*Scratchpad][above.]]
#+begin_src python
keys.extend([
        Key([mod, "control"], 'Return', lazy.group['scratchpad'].dropdown_toggle('quake_term')),
        ])
#+end_src
** Media and System Keys
#+begin_src python
keys.extend([
    Key([mod], "XF86AudioRaiseVolume", lazy.spawn("amixer -D pulse sset Master 5%+"), desc="Raise Volume by 5%"),
    Key([mod], "XF86AudioLowerVolume", lazy.spawn("amixer -D pulse sset Master 5%-"), desc="Lower Volume by 5%"),
    Key([mod], "XF86AudioMute", lazy.spawn("amixer -D pulse set Master 1+ toggle"), desc="Toggle Mute Audio"),
    Key([mod], "XF86AudioNext", lazy.spawn("mpc next"), desc="Music Next"),
    Key([mod], "XF86AudioPrev", lazy.spawn("mpc prev"), desc="Music Previous"),
    Key([mod], "XF86AudioPlay", lazy.spawn("mpc toggle"), desc="Play/Pause Music"),
    Key([mod], "XF86AudioMicMute", lazy.spawn("amixer set Capture toggle"), desc="Toggle Mute Microphone"),
    Key([mod], "XF86MonBrightnessUp", lazy.spawn("light -A 10"), desc="Increase Brightness by 10%"),
    Key([mod], "XF86MonBrightnessDown", lazy.spawn("light -U 10"), desc="Increase Brightness by 10%"),
])
#+end_src
** Mouse
Even though I'm a big fan of using the keyboard for almost everything, for floating windows a mouse is just sometimes more convenient.
#+begin_src python
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]
#+end_src
Unfortunately [[https://github.com/qtile/qtile/issues/855][it seems like]] resizing /tiling/ windows with mouse is not really implemented into qtile yet. Oh well, there's worse things.
* Rules
** App Rules
#+begin_src python
dgroups_app_rules = []  # type: list
#+end_src
** Floating Rules
#+begin_src python
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
#+end_src
* Bar
#+begin_src python
widget_defaults = dict(
    font="sans",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        bottom=bar.Bar(
            [
                widget.CurrentLayout(),
                widget.GroupBox(),
                widget.Prompt(),
                widget.WindowName(),
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                widget.TextBox("default config", name="default"),
                widget.TextBox("Press &lt;M-r&gt; to spawn", foreground="#d75f5f"),
                # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                # widget.StatusNotifier(),
                widget.Systray(),
                widget.Clock(format="%Y-%m-%d %a %I:%M %p"),
                widget.QuickExit(),
            ],
            24,
            # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
        # You can uncomment this variable if you see that on X11 floating resize/moving is laggy
        # By default we handle these events delayed to already improve performance, however your system might still be struggling
        # This variable is set to None (no cap) by default, but you can set it to 60 to indicate that you limit it to 60 events per second
        # x11_drag_polling_rate = 60,
    ),
]
#+end_src


* Tangle this file!

Tangle on save? This hook will ask you after every save.
;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
